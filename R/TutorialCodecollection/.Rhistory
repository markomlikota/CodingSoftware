ppC + scale_color_manual(values=vMyColors)
# to avoid too light first color, construct a vector with more colors,
# and then take the few ones you need from
# the beginning and middle of the colorspace:
vMyColors = sequential_hcl(7, palette = "Blues 2")[c(1,3,5)]
ppC + scale_color_manual(values=vMyColors)
# Similarly, we can specify the colors of the markers as well as lines:
ppCM = ggplot(mDat, aes(x=xvar, y=value, group=variable)) +
geom_line(aes(color=variable),size=0.5) +
geom_point(aes(color=variable),size=1) +
plotOptions
ppCM + scale_color_manual(values=vMyColors)
# Set point-shapes manually:
ppM = ggplot(mDat, aes(x=xvar, y=value, group=variable)) +
geom_line(aes(color=variable),size=0.5) +
geom_point(aes(color=variable, shape=variable),size=1) +
plotOptions
ppM + scale_shape_manual(values=c(7,9,24))
ppM + scale_shape_manual(values=c(7,9,24),
labels=c("mycurve1", "mycurve2", "mycurve3"))
# see http://sape.inf.usi.ch/quick-reference/ggplot2/shape for shapes available
# Take plot for illustration:
ppC = ppC + scale_color_manual(values=vMyColors)
# Remove legend title:
ppC + theme( legend.title=element_blank() )
# Remove legend altogether:
ppC + theme(legend.position = "none")
# Change position and direction:
# (by default, legend is outside the plot (middle-right) and vertical)
#put to middle-left:
ppC + theme( legend.position="left" )
#put to bottom-right:
ppC + theme( legend.justification="bottom" )
#make horizontal and put to bottom of plot:
ppC + theme(legend.direction="horizontal", legend.position="bottom", legend.justification="left")
#put inside the plot:
ppC + theme( legend.position=c(0.8, 0.75) )
#( top right is (1,1), top left is (0,1))
# In some cases, it's hard to put the legend inside the plot,
# but without crossing the lines/markers. e.g.
ppC + theme( legend.position=c(0.5, 0.5))
# Unfortunately, one cannot make the legend background fully transparent.
# Make legend-text transparent at least:
ppC + theme( legend.position=c(0.5, 0.5), legend.background=element_rect(fill = alpha("white", 0.0)) )
# Nice, final multiple-line plot:
ppC + theme( legend.title=element_blank(), legend.position=c(0.8, 0.75) ) +
labs(x="",y="",title="Three Important Distributions")
# Analogous to above, just with geom_point instead of geom_line option.
# Create dataframe with variables (vectors) to plot:
mData = as.data.frame(mNormDraws)
colnames(mData) = c("norm1","norm2","norm3")
# Melt to long format:
mDat = melt(mData,id.vars = "norm1")
# Note: variable taken here as id.var will be on x-axis.
# In a scatter plot, this could in principle be any variable.
# (In contrast, under the line plot, it was clear what the x-axis is.)
# Plot, distinguishing variables by markers:
ggplot(mDat, aes(x=norm1, y=value, group=variable)) +
geom_point(aes(shape=variable), size=2, color="blue")
# Plot, distinguishing variables by colors:
ggplot(mDat, aes(x=norm1, y=value, group=variable)) +
geom_point(aes(color=variable), size=2)
# Plot, distinguishing variables by both:
ggplot(mDat, aes(x=norm1, y=value, group=variable)) +
geom_point(aes(color=variable, shape=variable), size=2)
# Add options:
ppMS = ggplot(mDat, aes(x=norm1, y=value, group=variable)) +
geom_point(aes(color=variable, shape=variable), size=2) +
plotOptions
# Specify marker-shapes and colors manually:
ppMS + scale_color_manual(values=vMyColors) + scale_shape_manual(values=c(1,4))
# Also re-label variables:
ppMS + scale_color_manual(values=vMyColors, labels=c("1st Normal","2nd Normal")) +
scale_shape_manual(values=c(1,4), labels=c("1st Normal","2nd Normal"))
# (note: just doing it in one of the two options will produce two legends)
# Note: when distinguishing by color,
# by default, R will choose a round marker that is filled (as above). e.g.
ggplot(mDat, aes(x=norm1, y=value, group=variable)) +
geom_point(aes(color=variable), size=2)
# When you change the markers manually, like here, then they will not be filled.
# To add filling, must let filling also change by variable.
# e.g. this produces unfilled triangles:
ggplot(mDat, aes(x=norm1, y=value, group=variable)) +
geom_point(aes(color=variable), size=2, shape=2)
# to get filled triangles:
ggplot(mDat, aes(x=norm1, y=value, group=variable)) +
geom_point(aes(color=variable,fill=variable), size=2, shape=24)
# Nice, final scatter-plot with multiple variables:
ggplot(mDat, aes(x=norm1, y=value, group=variable)) +
geom_point(aes(color=variable), size=2) +
scale_color_manual(values=c("blue","red"), labels=c("2nd Normal","3rd Normal")) +
plotOptions +
scale_y_continuous(limits=c(0,12),breaks=c(0,4,8,12)) +
theme( legend.title=element_blank(), legend.position=c(0.8, 0.15) ) +
labs(x="1st Normal",y="",title="Multivariate Normal Draws (k=3)")
# Above, we plotted three variables in a single scatter plot,
# i.e. we plotted two variables against a third.
# In the same way, we could have plotted, say, 5 variables
# by plotting 4 variables against a fifth one, yielding 4 "clouds" of points.
# Sometimes, we indeed want to plot two variables,
# but distinguish the points in the scatter by a third variable.
# The number of "clouds" of points is then determined
# by how many values this third variable has.
# --------------------------------------------------------- #
# Discrete Case
# --------------------------------------------------------- #
# Plot hp against hp, with different colors for different numbers of cylinders:
ggplot(mtcars, aes(x=mpg, y=hp, group=cyl)) +
geom_point(aes(color=cyl))
# Note that R thinks of cyl as a continuous variable, even though it takes only three values.
# To fix that, code it as type "character" rather than "numeric":
mtcars2 = mtcars # create new dataframe..
mtcars2$cyl = as.character(mtcars2$cyl) #.. in which cyl is of type character
ppMS = ggplot(mtcars2, aes(x=mpg, y=hp, group=cyl)) +
geom_point(aes(color=cyl))
# We can change the colors as above; e.g.
ppMS + scale_color_manual(values=vMyColors,
labels=c("4 cyl.","6 cyl.","8 cyl."))
# Also, could of course distinguish points for different numbers of cylinders
# by markers rather than colors (or both).
# In this case, cyl really needs to be of type character,
# because, in contrast to colors, markers cannot vary continuously.
# --------------------------------------------------------- #
# Continuous Case
# --------------------------------------------------------- #
# Plot hp against mpg, and distinguish points by color based on value of qsec:
ppMS = ggplot(mtcars, aes(x=mpg, y=hp, group=qsec)) +
geom_point(aes(color=qsec))
# To specify colors, need to use scale_color_gradient rather than scale_color_manual:
ppMS + scale_color_gradient(low="white",high="blue")
# The analogous holds for the filling
# (if marker-shapes are specified that can be filled):
ppMS = ggplot(mtcars, aes(x=mpg, y=hp, group=qsec)) +
geom_point(aes(color=qsec),shape=21) +
scale_color_gradient(low="white",high="blue") +
scale_fill_gradient(low="white",high="blue")
# Nice, final grouped scatter-plot:
ggplot(mtcars, aes(x=mpg, y=hp, group=qsec)) +
geom_point(aes(color=qsec,fill=qsec),size=3,shape=21) +
scale_color_gradient(low="white",high="blue") +
scale_fill_gradient(low="white",high="blue") +
plotOptions +
scale_y_continuous(limits=c(0,300),breaks=seq(0,300,by=100)) +
theme( legend.position="none" ) +
labs(title="A Nice Grouped-Scatter Plot")
ggplot() + geom_histogram(aes(x=mNormDraws[,1],y=..density..))
ggplot() + geom_histogram(aes(x=mNormDraws[,1],y=..density..))
ggplot(data=mData) + geom_histogram(aes(x=norm1,y=..density..))
ggplot(data=mData) + geom_histogram(aes(x=norm1,y=..density..))
ggplot(data=mData) + geom_histogram(aes(x=norm1,y=..density..), binwidth=0.5)
ggplot(data=mData) + geom_histogram(aes(x=norm1,y=..density..), fill="grey", color="black")
ggplot(data=mData) + geom_histogram(aes(x=norm1,y=..density..), bins=20)
ggplot(data=mData) + geom_histogram(aes(x=norm1,y=..density..), bins=10)
ggplot() + geom_histogram(aes(x=mNormDraws[,2],y=..density..))
vThisNormPDF = dnorm(vx,5,1)
ggplot() +
geom_histogram(aes(x=mNormDraws[,2],y=..density..))+
geom_line(aes(x=vx,y=vThisNormPDF))
ggplot(data=mData) +
geom_histogram(aes(x=norm2,y=..density..)) +
geom_line(aes(x=vx,y=vThisNormPDF))
ggplot(data=mData) +
geom_histogram(aes(x=norm2,y=..density..)) +
geom_line(aes(x=vx,y=vThisNormPDF))
ggplot(data=mData) +
geom_histogram(aes(x=norm2,y=..density..)) +
geom_histogram(aes(x=norm3,y=..density..))
ggplot(data=mData) +
geom_histogram(aes(x=norm2,y=..density..),color="blue") +
geom_histogram(aes(x=norm3,y=..density..),color="red")
ggplot(data=mData) + geom_histogram(aes(x=norm2,y=..density..), color="black", fill="grey", alpha=0.2)
ggplot(data=mData) +
geom_histogram(aes(x=norm2,y=..density..),color="blue",fill="blue",alpha=0.2) +
geom_histogram(aes(x=norm3,y=..density..),color="red",fill="red",alpha=0.2)
ggplot(mtcars2, aes(x=hp, fill=cyl)) +
geom_histogram(aes(x=hp, y = ..density.., color=cyl), color="white", alpha=0.6, position = 'identity',bins=20)
ggplot(mtcars2, aes(x=hp, fill=cyl)) +
geom_histogram(aes(x=hp, y = ..density.., color=cyl), color="white", alpha=0.6)
ggplot(mtcars2, aes(x=hp, fill=cyl)) +
geom_histogram(aes(x=hp, y = ..density.., color=cyl), color="white", alpha=0.6, position = 'identity')
ggplot(mtcars2, aes(x=hp, fill=cyl)) +
geom_histogram(aes(x=hp, y = ..density.., color=cyl), position = 'identity')
ggplot(mtcars2, aes(x=hp, fill=cyl)) +
geom_histogram(aes(x=hp, y = ..density.., color=cyl), position = 'identity', alpha=0.6)
ggplot(mtcars2, aes(x=hp, fill=cyl)) + plotOptions +
geom_histogram(aes(x=hp, y = ..density.., color=cyl), position = 'identity', alpha=0.6, color="white")
ggplot(mtcars2, aes(x=hp, fill=cyl)) + plotOptions +
geom_histogram(aes(x=hp, y = ..density.., color=cyl), position = 'identity', alpha=0.6, color="white") +
theme( legend.title=element_blank(), legend.position=c(0.8, 0.75) )
ggplot(mtcars2, aes(x=hp, fill=cyl)) + plotOptions +
geom_histogram(aes(x=hp, y = ..density.., color=cyl), position = 'identity', alpha=0.6, color="white") +
theme( legend.title=element_blank(), legend.position=c(0.8, 0.75) )
ggplot(mtcars2, aes(x=hp, fill=cyl)) + plotOptions +
geom_histogram(aes(x=hp, y = ..density.., color=cyl), position = 'identity', alpha=0.6, color="white") +
theme( legend.title=element_blank(), legend.position=c(0.8, 0.75), legend.text=element_text(color="black") )
ggplot(mtcars2, aes(x=hp, fill=cyl)) + plotOptions +
geom_histogram(aes(x=hp, y = ..density.., color=cyl), position = 'identity', alpha=0.6, color="white") +
theme( legend.title=element_blank(), legend.position=c(0.8, 0.75), legend.text=element_text(color="black") )
ggplot(mtcars2, aes(x=hp, fill=cyl)) + plotOptions +
geom_histogram(aes(x=hp, y = ..density.., color=cyl), position = 'identity', alpha=0.6, color="white") +
theme( legend.title=element_blank(), legend.position=c(0.8, 0.75), legend.text=element_text(color="black") )
ggplot(mtcars2, aes(x=hp, fill=cyl)) + plotOptions +
geom_histogram(aes(x=hp, y = ..density.., color=cyl), position = 'identity', alpha=0.6) +
theme( legend.title=element_blank(), legend.position=c(0.8, 0.75))
ggplot(mtcars2, aes(x=hp, fill=cyl)) + plotOptions +
geom_histogram(aes(x=hp, y = ..density.., color=cyl), position = 'identity', alpha=0.6)
ggplot(mtcars2, aes(x=hp, fill=cyl)) + plotOptions +
geom_histogram(aes(x=hp, y = ..density.., color=cyl), position = 'identity', alpha=0.6) +
theme( legend.title=element_blank(), legend.position=c(0.8, 0.75)) +
labs(x="",y="",title="Histogram of hp by cyl.")
ggplot(mtcars2, aes(x=hp, fill=cyl)) + plotOptions +
geom_histogram(aes(x=hp, y = ..density.., color=cyl), position = 'identity', alpha=0.6) +
theme( legend.title=element_blank(), legend.position=c(0.8, 0.75)) +
labs(x="",y="",title="Histogram of hp by cyl.") +
theme(axis.ticks.y = element_blank(), axis.text.y = element_blank())
ggplot() + geom_histogram(aes(x=mNormDraws[,2],y=..freq..))
ggplot() + geom_histogram(aes(x=mNormDraws[,2],y=..frequency..))
ggplot() + geom_histogram(aes(x=mNormDraws[,2]))
ggplot() + plotOptions +
geom_histogram(aes(x=mNormDraws[,2],y=..density..))+
geom_line(aes(x=vx,y=vThisNormPDF))
ggplot() + plotOptions +
geom_histogram(aes(x=mNormDraws[,2],y=..density..), color="blue",fill="blue",alpha=0.2)+
geom_line(aes(x=vx,y=vThisNormPDF))
ggplot() + plotOptions +
geom_histogram(aes(x=mNormDraws[,2],y=..density..), color="blue",fill="blue",alpha=0.2)+
geom_line(aes(x=vx,y=vThisNormPDF),color="purple") +
labs(x="",y="",title="Histogram of N(5,1) draws") +
theme(axis.ticks.y = element_blank(), axis.text.y = element_blank())
qqnorm(vtPDF, xlab = "N(0,1)", ylab = "t(10)", col = "blue")
qqline(vtPDF, col="tomato")
library(doBy)
mData4 = summaryBy(hp ~ cyl, FUN=mean, data=mtcars)
colnames(mData4) = c("cyl","meanhp")
pp6 = ggplot(data=mData4, aes(x=cyl, y=meanhp)) +
geom_bar(stat="identity",color="white",fill=myBlue)
pp6
pp6 = ggplot(data=mData4, aes(x=cyl, y=meanhp)) +
geom_bar(stat="identity",color="white",fill="blue")
pp6
mData4
mean(mNormDraws)
apply(mNormDraws,2,mean)
mDataBP = data.frame(norms=c(1,2,3),means=apply(mNormDraws,2,mean))
ggplot(data=mDataBP, aes(x=norms, y=means)) +
geom_bar(stat="identity",color="white",fill="blue")
ggplot(data=mDataBP, aes(x=norms, y=means)) +
geom_bar()
ggplot(data=mDataBP, aes(x=norms, y=means)) +
geom_bar(stat="identity")
ggplot(data=mDataBP, aes(x=norms, y=means)) +
geom_bar(stat="identity",color="blue",fill="blue",alpha=0.2)
ppBP = ggplot(data=mDataBP, aes(x=norms, y=means)) +
geom_bar(stat="identity",color="blue",fill="blue",alpha=0.2)
mDataBP$norms = as.character(mDataBP$norms)
ppBP = scale_x_discrete(labels=paste(c(4,6,8),"cyls",sep=""))
ppBP
ppBP
ggplot(data=mDataBP, aes(x=norms, y=means)) +
geom_bar(stat="identity",color="blue",fill="blue",alpha=0.2) +
scale_x_discrete(labels=paste(c(4,6,8),"cyls",sep=""))
mDataBP$norms = as.character(mDataBP$norms)
ggplot(data=mDataBP, aes(x=norms, y=means)) +
geom_bar(stat="identity",color="blue",fill="blue",alpha=0.2) +
scale_x_discrete(labels=c("1st","2nd","3rd"))
ggplot(data=mDataBP, aes(x=norms, y=means)) + plotOptions +
geom_bar(stat="identity",color="blue",fill="blue",alpha=0.2) +
scale_x_discrete(labels=c("1st","2nd","3rd")) +
labs(x="",y="",title="Mean of Normal Draws")
# Show mean of Normal draws for each column (dimension of multiv. Normal):
mDataBP = data.frame(norms=c(1,2,3),means=apply(mNormDraws,2,mean))
ggplot(data=mDataBP, aes(x=norms, y=means)) +
geom_bar(stat="identity")
# Adjust appearance of bars:
ggplot(data=mDataBP, aes(x=norms, y=means)) +
geom_bar(stat="identity",color="blue",fill="blue",alpha=0.2)
# To change x-axis, it is best to first make R realize that
# it is a discrete rather than continuous variable:
mDataBP$norms = as.character(mDataBP$norms)
ggplot(data=mDataBP, aes(x=norms, y=means)) +
geom_bar(stat="identity",color="blue",fill="blue",alpha=0.2) +
scale_x_discrete(labels=c("1st","2nd","3rd"))
ggplot(data=mDataBP, aes(x=norms, y=means)) + plotOptions +
geom_bar(stat="identity",color="blue",fill="blue",alpha=0.2) +
scale_x_discrete(labels=c("1st","2nd","3rd")) +
labs(x="",y="",title="Mean of Normal Draws")
ppM
ppM
ppMS
ppTS
ppBP
ppC
pp1
pp2
grid.arrange(pp1, ppTS, ncol=2,top=title, widths = c(2,2), layout_matrix = rbind(c(1,2)))
library(gridExtra)
library(ggpubr)
title = text_grob("True Parameter Values", size = 18, face = "bold", vjust=1)
# 1 x 2 plots:
grid.arrange(pp1, ppTS, ncol=2,top=title, widths = c(2,2), layout_matrix = rbind(c(1,2)))
mData
# Three plots for illustration:
pp1 = ggplot(data=mData) + geom_histogram(aes(x=norm1))
pp2 = ggplot(data=mData) + geom_histogram(aes(x=norm2))
pp3 = ggplot(data=mData) + geom_histogram(aes(x=norm3))
pp1
pp2
pp3
pp1 = ggplot(data=mData) + plotOptions +
geom_histogram(aes(x=norm1)) + labs(x="",y="","norm1")
pp2 = ggplot(data=mData) + plotOptions +
geom_histogram(aes(x=norm2)) + labs(x="",y="","norm2")
pp3 = ggplot(data=mData) + plotOptions +
geom_histogram(aes(x=norm3)) + labs(x="",y="","norm3")
pp1
pp2
pp3
# Three plots for illustration:
pp1 = ggplot(data=mData) + plotOptions +
geom_histogram(aes(x=norm1),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="","norm1")
pp2 = ggplot(data=mData) + plotOptions +
geom_histogram(aes(x=norm2),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="","norm2")
pp3 = ggplot(data=mData) + plotOptions +
geom_histogram(aes(x=norm3),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="","norm3")
pp1
pp2
pp3
pp1
pp2
pp3
pp1 = ggplot(data=mData) + plotOptions +
geom_histogram(aes(x=norm1),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="","norm1") + ylim(c(0,10))
pp1
pp2
pp3
pp1
pp1 = ggplot(data=mData) + plotOptions +
geom_histogram(aes(x=norm1),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="","norm1") + ylim(c(0,8))
pp2 = ggplot(data=mData) + plotOptions +
geom_histogram(aes(x=norm2),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="","norm2") + ylim(c(0,8))
pp3 = ggplot(data=mData) + plotOptions +
geom_histogram(aes(x=norm3),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="","norm3") + ylim(c(0,8))
pp1
pp2
pp3
# Three plots for illustration:
pp1 = ggplot(data=mData) + plotOptions +
geom_histogram(aes(x=norm1),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="","norm1") + ylim(c(0,6))
pp2 = ggplot(data=mData) + plotOptions +
geom_histogram(aes(x=norm2),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="","norm2") + ylim(c(0,6))
pp3 = ggplot(data=mData) + plotOptions +
geom_histogram(aes(x=norm3),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="","norm3") + ylim(c(0,6))
pp1
pp2
pp3
pp1
pp2
pp3
pp1
pp1 = ggplot(data=mData) + plotOptions +
geom_histogram(aes(x=norm1),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="","norm1") +
ylim(c(0,6)) +
scale_x_continuous(breaks=c(-1,10))
pp1
pp1 = ggplot(data=mData) + plotOptions +
geom_histogram(aes(x=norm1),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="","norm1") +
ylim(c(0,6))
pp1
pp1
pp1 + scale_x_continuous(breaks=c(-1,10))
pp1
pp1 = ggplot(data=mData) + plotOptions +
geom_histogram(aes(x=norm1),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="","norm1") +
ylim(c(0,6)) +
scale_x_continuous(limits=c(-2,10),breaks=seq(-2,10,by=4))
pp1
pp1 = ggplot(data=mData) + plotOptions +
geom_histogram(aes(x=norm1),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="","norm1") +
ylim(c(0,6)) +
scale_x_continuous(limits=c(-2,10),breaks=seq(-2,10,by=2))
pp2 = ggplot(data=mData) + plotOptions +
geom_histogram(aes(x=norm2),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="","norm2") +
ylim(c(0,6)) +
scale_x_continuous(limits=c(-2,10),breaks=seq(-2,10,by=2))
pp3 = ggplot(data=mData) + plotOptions +
geom_histogram(aes(x=norm3),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="","norm3") +
ylim(c(0,6)) +
scale_x_continuous(limits=c(-2,10),breaks=seq(-2,10,by=2))
plotOptionsHere = list(plotOptions,
ylim(c(0,6)),
scale_x_continuous(limits=c(-2,10),breaks=seq(-2,10,by=2)))
pp1 = ggplot(data=mData) +
geom_histogram(aes(x=norm1),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="","norm1") +
plotOptionsHere
pp1
# Three plots for illustration:
plotOptionsCommonHere =
list(plotOptions,
ylim(c(0,6)),
scale_x_continuous(limits=c(-2,10),breaks=seq(-2,10,by=2))
)
pp1 = ggplot(data=mData) + plotOptionsCommonHere +
geom_histogram(aes(x=norm1),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="","norm1")
pp2 = ggplot(data=mData) + plotOptionsCommonHere +
geom_histogram(aes(x=norm2),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="","norm2")
pp3 = ggplot(data=mData) + plotOptionsCommonHere +
geom_histogram(aes(x=norm3),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="","norm3")
pp1
pp2
pp3
grid.arrange(pp1, pp2, ncol=2)
ggsave("myplot1.pdf", arrangeGrob( pp1, pp2, ncol=2) )
title = text_grob("Draws from two Normals", size = 14, face = "bold", vjust=1)
grid.arrange(pp1, pp2, ncol=2,top=title)
grid.arrange(pp1, pp2, ncol=2,top=title, widths = c(2,2), layout_matrix = rbind(c(1,2)))
grid.arrange(pp1, pp2, ncol=2,top=title, widths = c(1,2), layout_matrix = rbind(c(1,2)))
grid.arrange(pp1, pp2, ncol=2,top=title, widths = c(2,2), layout_matrix = rbind(c(1,2)))
rbind(c(1,2))
rbind(c(2,1))
grid.arrange(pp1, pp2, ncol=2,top=title, widths = c(2,2), layout_matrix = rbind(c(2,1)))
title = text_grob("Draws from two Normals", size = 14, face = "bold", vjust=-10)
grid.arrange(pp1, pp2, ncol=2,top=title)
title = text_grob("Draws from two Normals", size = 14, face = "bold", vjust=-1)
grid.arrange(pp1, pp2, ncol=2,top=title)
# Add title:
title = text_grob("Draws from two Normals", size = 14, face = "bold", vjust=1)
grid.arrange(pp1, pp2, ncol=2,top=title)
title = text_grob("Draws from two Normals", size = 14, face = "bold", vjust=2)
grid.arrange(pp1, pp2, ncol=2,top=title)
title = text_grob("Draws from two Normals", size = 14, face = "bold", vjust=4)
grid.arrange(pp1, pp2, ncol=2,top=title)
# Add title:
title = text_grob("Draws from two Normals", size = 14, face = "bold", vjust=6)
grid.arrange(pp1, pp2, ncol=2,top=title)
pp1
pp2
pp1 = ggplot(data=mData) + plotOptionsCommonHere +
geom_histogram(aes(x=norm1),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="",title="norm1")
pp2 = ggplot(data=mData) + plotOptionsCommonHere +
geom_histogram(aes(x=norm2),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="",title="norm2")
pp3 = ggplot(data=mData) + plotOptionsCommonHere +
geom_histogram(aes(x=norm3),color="blue",fill="blue",alpha=0.2) +
labs(x="",y="",title="norm3")
grid.arrange(pp1, pp2, ncol=2)
title = text_grob("Draws from two Normals", size = 14, face = "bold", vjust=5)
grid.arrange(pp1, pp2, ncol=2,top=title)
grid.arrange(pp1, pp2, ncol=2, top=title, widths = c(2,2))
library(patchwork)
# 2 x 3 plots:
ppp = (pp1 | pp1 | pp1) /
(pp1 | pp1 | pp1)
ppp
(pp1 | pp2)
pp = grid.arrange(pp1, pp2, ncol=2)
pp
pp
pp1
pp
show(pp)
print(pp)
ppTotal = (pp1 | pp2)
ppTotal
pp1
pp2
ppTotal = (pp1 | pp2)
ppTotal
# Add title:
ppTotal + plot_annotation(title = "Draws from two Normals")
(pp1 | pp1 | pp1) /
(pp1 | pp1 | pp1)
ppTotal
layout = "
AABB
CCDD
EEEE
EEEE
"
pp1 + pp1 + pp1 + pp1 + pp1 + plot_layout(design = layout)
pp1
ppTotal + plot_layout(guides = "collect") + theme(legend.position = 'bottom')
layout = "
AABB
AABB
EEEE
EEEE
"
pp1 + pp1 + pp1 + plot_layout(design = layout)
ggsave("myplot2.pdf",width=40,height=25,units="cm")
knitr::purl("R-Tutorial_All.Rmd")
source("~/Dropbox/Coding/CodingSoftware/R/Tutorial/R-Tutorial_AllCodes.R")
